<?php
/**
 * @file
 * Panels Pane Report Unit Tests.
 */

/**
 * Unit tests for the Panels Pane Report.
 *
 * @ingroup Panels Pane Report
 */
class PanelsPaneReportUnitTestCase extends DrupalUnitTestCase {

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'Panels Panel Report Unit Tests',
      'description' => 'Test panels pane report functionality',
      'group' => 'Panels Pane Report',
    );
  }

  /**
   * Include the necessary files for unit testing.
   */
  public function setUp() {
    module_load_include('inc', 'panels_pane_report', 'src/report.interface');
    module_load_include('inc', 'panels_pane_report', 'src/panel_report.class');
    module_load_include('inc', 'panels_pane_report', 'src/views.handlers');
    parent::setUp('panels_pane_report');
  }

  /**
   * Test PanelsPaneReport::retrievePageStorageIdsForInstance() output.
   */
  public function testStorageIdIsNumeric() {
    $instance_info = ['panel' => (object) ['storage_id' => 3167]];
    $pane_mapping = [];
    $expected = [3167];

    $this->assertEqual($expected, PanelsPaneReport::retrievePageStorageIdsForInstance($instance_info, $pane_mapping));
  }

  /**
   * Test PanelsPaneReport::retrievePageStorageIdsForInstance() output.
   */
  public function testPaneMapInstancesExist() {
    $instance_info = ['panel' => (object) ['storage_id' => 'some_mini_panel']];
    $pane_mapping = [
      'some_mini_panel' => [
        'instances' => [
          ['panel' => (object) ['storage_id' => 3167]],
          ['panel' => (object) ['storage_id' => 5100]],
          ['panel' => (object) ['storage_id' => 9033]],
        ]
      ]
    ];
    $expected = [3167, 5100, 9033];

    $this->assertEqual($expected, PanelsPaneReport::retrievePageStorageIdsForInstance($instance_info, $pane_mapping));
  }

  /**
   * Test PanelsPaneReport::retrievePageStorageIdsForInstance() output.
   */
  public function testOnlyRelevantPaneMapInstancesExist() {
    $instance_info = ['panel' => (object) ['storage_id' => 'another_mini_panel']];
    $pane_mapping = [
      'some_mini_panel' => [
        'instances' => [
          ['panel' => (object) ['storage_id' => 3167]],
          ['panel' => (object) ['storage_id' => 5100]],
          ['panel' => (object) ['storage_id' => 9033]],
        ]
      ],
      'another_mini_panel' => [
        'instances' => [
          ['panel' => (object) ['storage_id' => 9500]],
          ['panel' => (object) ['storage_id' => 1233]],
        ]
      ]
    ];
    $expected = [9500, 1233];

    $this->assertEqual($expected, PanelsPaneReport::retrievePageStorageIdsForInstance($instance_info, $pane_mapping));
  }

  /**
   * Test PanelsPaneReport::retrievePageStorageIdsForInstance() output.
   */
  public function testUnreferencedMiniPanelReportsCorrectly() {
    $instance_info = ['panel' => (object) ['storage_id' => 'some_mini_panel']];
    $pane_mapping = ['some_mini_panel' => []];
    $expected = [PanelsPaneReport::NODE_UNREFERENCED];

    $this->assertEqual($expected, PanelsPaneReport::retrievePageStorageIdsForInstance($instance_info, $pane_mapping));
  }

}
