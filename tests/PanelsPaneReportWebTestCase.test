<?php

/**
 * @file
 * Panels Pane Report Web Tests.
 */

/**
 * Web tests for the Panels Pane Report.
 *
 * @ingroup Panels Pane Report
 */
class PanelsPaneReportWebTestCase extends DrupalWebTestCase {
  protected $profile = 'testing';

  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => t('Panels Panel Report Web Tests'),
      'description' => t('Test panels pane report functionality'),
      'group' => t('Panels Pane Report'),
    );
  }

  /**
   * Implements setUp().
   */
  public function setUp() {
    parent::setUp(array(
      'panels_pane_report',
      'panels_node',
      'page_manager',
      'panels_mini',
    ));
    db_truncate('panels_pane_report');
  }

  /**
   * Test report is accessible with permission.
   */
  public function testReportIsAccessible() {
    $admin_user = $this->drupalCreateUser(array(
      'access panels pane report',
    ));

    $this->drupalLogin($admin_user);
    $this->drupalGet('admin/reports/panels-pane-report');
    $this->assertText(t('Panels Pane Report'), 'Access allowed on panels pane report.');
  }

  /**
   * Test report is inaccessible without permission.
   */
  public function testReportIsInaccessible() {
    $admin_user = $this->drupalCreateUser(array());

    $this->drupalLogin($admin_user);
    $this->drupalGet('admin/reports/panels-pane-report');
    $this->assertText(t('Access denied'), 'Access denied on panels pane report.');
  }

  /**
   * Test report is accessible with permission.
   */
  public function testReportSettingsAreAccessible() {
    $admin_user = $this->drupalCreateUser(array(
      'administer panels pane report settings',
    ));

    $this->drupalLogin($admin_user);
    $this->drupalGet('admin/config/system/panels_pane_report');
    $this->assertText(t('Panels Pane Report'), 'Access allowed on panels pane report.');
  }

  /**
   * Test report is inaccessible without permission.
   */
  public function testReportSettingsAreInaccessible() {
    $admin_user = $this->drupalCreateUser(array());

    $this->drupalLogin($admin_user);
    $this->drupalGet('admin/config/system/panels_pane_report');
    $this->assertText(t('Access denied'), 'Access denied on panels pane report.');
  }

  /**
   * Test report can be regenerated with permission.
   */
  public function testReportCanBeRegenerated() {
    $admin_user = $this->drupalCreateUser(array(
      'access panels pane report',
      'generate panels pane report',
    ));

    $this->drupalLogin($admin_user);
    $this->drupalGet('admin/reports/panels-pane-report');
    $this->assertField('edit-regenerate-report');
  }

  /**
   * Test report can't be regenerated without permission.
   */
  public function testReportCantBeRegenerated() {
    $admin_user = $this->drupalCreateUser(array(
      'access panels pane report',
    ));

    $this->drupalLogin($admin_user);
    $this->drupalGet('admin/reports/panels-pane-report');
    $this->assertNoField('edit-regenerate-report');
  }

  /**
   * Test filter contains expected filter options.
   */
  public function testExpectedFilterOptions() {
    $row = array(
      'entity_type' => 'puppy',
      'pattern_storage_id' => 'k9',
      'page_storage_id' => 'yard1',
      'display_storage_type' => 'doghouse',
      'display_storage_id' => 'woofhouse9',
      'build_mode' => 'retriever',
      'style_mode' => 'golden',
      'bundle' => 'litter',
    );
    PanelsPaneReport::reportItem($row);

    $admin_user = $this->drupalCreateUser(array(
      'access panels pane report',
    ));

    $this->drupalLogin($admin_user);

    $this->drupalGet('admin/reports/panels-pane-report');

    // Entity Types.
    $this->assertRaw('<option value="puppy">puppy</option>');

    // Bundles.
    $this->assertRaw('<option value="litter">litter</option>');

    // Build Modes.
    $this->assertRaw('<option value="retriever">retriever</option>');

    // Style Modes.
    $this->assertRaw('<option value="golden">golden</option>');

    // Containers.
    $this->assertRaw('<option value="doghouse">doghouse</option>');
  }

  /**
   * Test report supports panels node containers.
   */
  public function testPanelsNodeContainers() {
    $admin_user = $this->drupalCreateUser(array(
      'access panels pane report',
      'generate panels pane report',
    ));

    // Create a temporary node.
    $node = $this->drupalCreateNode(array('type' => 'widget', 'uid' => $admin_user->uid));

    // Simulate the addition of the node to a panels_node panel.
    $did = 500;
    $storage_id = 8;
    $config_array = array('nid' => $node->nid, 'build_mode' => 'burrito');
    $style_array = array('style' => 'wrapped');

    db_insert('panels_pane')->fields(array(
      'did' => $did,
      'configuration' => serialize($config_array),
      'style' => serialize($style_array),
      'type' => 'node',
      'subtype' => 'node',
    ))->execute();

    db_insert('panels_display')->fields(array(
      'did' => $did,
      'panel_settings' => serialize(''),
      'storage_type' => 'panels_node',
      'storage_id' => $storage_id,
    ))->execute();

    db_insert('panels_node')->fields(array(
      'nid' => $node->nid,
      'did' => $did,
      'pipeline' => 'standard',
    ))->execute();

    // Attempt to login and regenerate the report.
    $this->drupalLogin($admin_user);
    $submit_options = array('query' => array('op' => 'Regenerate Report'));
    $this->drupalGet('admin/reports/panels-pane-report', $submit_options);
    $this->assertText('node:widget');
    $this->assertText('Build Mode: burrito');
    $this->assertText('Style: wrapped');
    $this->assertText($node->title);
    $this->assertRaw('<a href="' . url('node/' . $node->nid) . '" target="_blank">node/' . $node->nid . '</a>');
    $this->assertRaw('<a href="' . url('node/' . $storage_id) . '" target="_blank">node/' . $storage_id . '</a>');
    $this->assertText('panels_node [' . $storage_id . ']');
  }

  /**
   * Creates a Panels pane.
   */
  private function createNewPanelsPane(array $configuration = array(), $type = 'node', $subtype = 'node') {
    $pane = panels_new_pane($type, $subtype, TRUE);
    $pane->panel = 'left';
    $pane->configuration = $configuration;
    $pane->style = array('style' => 'wrapped', 'settings' => array());

    return $pane;
  }

  /**
   * Creates a Panels display object.
   */
  private function createNewPanelsDisplay($storage_type, $storage_id) {
    $display = panels_new_display();
    $display->layout = 'twocol';
    $display->storage_type = $storage_type;
    $display->storage_id = $storage_id;

    return $display;
  }

  /**
   * Creates a new Mini Panel object.
   */
  private function createNewMiniPanel($name = 'grid_1', $title = NULL) {
    // Create a new mini panel.
    $mini_panel = panels_mini_new();
    $mini_panel->category = '';
    $mini_panel->display = self::createNewPanelsDisplay('panels_mini', $name);
    $mini_panel->name = $name;
    $mini_panel->admin_title = isset($title) ? $title : $name;
    $mini_panel->admin_description = '';

    return $mini_panel;
  }

  /**
   * Adds a pane to the specified display.
   */
  private function addPaneToDisplay(&$display, $pane) {
    $display->panels[$pane->panel][] = $pane->pid;
    $display->panel_settings['style_settings'][$pane->panel] = NULL;
    $display->content[$pane->pid] = $pane;
    panels_save_display($display);
  }

  /**
   * Test report supports panels_mini containers.
   */
  public function testPanelsMiniContainers() {
    $admin_user = $this->drupalCreateUser(array(
      'access panels pane report',
      'generate panels pane report',
    ));

    // Create temporary nodes.
    $node1 = $this->drupalCreateNode(array('type' => 'widget', 'uid' => $admin_user->uid));
    $node2 = $this->drupalCreateNode(array('type' => 'burrito', 'uid' => $admin_user->uid));

    // Create a mini panel.
    $mp_name = 'grid_1';
    $mp = self::createNewMiniPanel($mp_name);

    // Create the panes.
    $pane1 = self::createNewPanelsPane(array(
      'nid' => $node1->nid,
      'build_mode' => 'extended',
    ));

    $pane2 = self::createNewPanelsPane(array(
      'nid' => $node2->nid,
      'build_mode' => 'limited',
    ));

    // Add the panes to the display.
    self::addPaneToDisplay($mp->display, $pane1);
    self::addPaneToDisplay($mp->display, $pane2);

    panels_mini_save($mp);

    // Attempt to login and regenerate the report.
    $this->drupalLogin($admin_user);
    $submit_options = array('query' => array('op' => 'Regenerate Report'));
    $this->drupalGet('admin/reports/panels-pane-report', $submit_options);
    $this->assertText('node:widget');
    $this->assertText('node:burrito');
    $this->assertText('Style: wrapped');
    $this->assertText($node1->title);
    $this->assertText($node2->title);
    $this->assertRaw('<a href="' . url('node/' . $node1->nid) . '" target="_blank">node/' . $node1->nid . '</a>');
    $this->assertRaw('<a href="' . url('node/' . $node2->nid) . '" target="_blank">node/' . $node2->nid . '</a>');
    $this->assertText('panels_mini [' . $mp_name . ']');
  }

  /**
   * Test report supports panels_mini entity.
   */
  public function testPanelsMiniEntity() {
    // Create admin user.
    $admin_user = $this->drupalCreateUser(array(
      'access panels pane report',
      'generate panels pane report',
    ));

    // Create temporary node.
    $node = $this->drupalCreateNode(array(
      'type' => 'panels_node',
      'uid' => $admin_user->uid,
      'panels_node' => array(
        'layout' => 'twocols',
      ),
    ));

    // Create display.
    $display = self::createNewPanelsDisplay('panels_node', $node->nid);

    // Create a mini panel.
    $mp = self::createNewMiniPanel();
    panels_mini_save($mp);

    // Create the panes.
    $pane = self::createNewPanelsPane(array(
      'build_mode' => 'burrito',
    ), 'panels_mini', $mp->name);

    // Add pane to display.
    self::addPaneToDisplay($display, $pane);

    // Attempt to login and regenerate the report.
    $this->drupalLogin($admin_user);
    $submit_options = array('query' => array('op' => 'Regenerate Report'));
    $this->drupalGet('admin/reports/panels-pane-report', $submit_options);
    $this->assertText('panels_mini');
    $this->assertText('Build Mode: burrito');
    $this->assertText('Style: wrapped');
    $this->assertText($node->title);
    $this->assertRaw('<a href="' . url('admin/structure/mini-panels/list/' . $mp->name) . '" target="_blank">' . $mp->name . '</a>');
    $this->assertRaw('<a href="' . url('node/' . $node->nid) . '" target="_blank">node/' . $node->nid . '</a>');
    $this->assertText('panels_node [' . $node->nid . ']');
  }

}
