<?php
/**
 * @file
 * Panels Pane Report Web Tests.
 */

/**
 * Web tests for the Panels Pane Report.
 *
 * @ingroup Panels Pane Report
 */
class PanelsPaneReportWebTestCase extends DrupalWebTestCase {
  protected $profile = 'testing';

  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => t('Panels Panel Report Web Tests'),
      'description' => t('Test panels pane report functionality'),
      'group' => t('Panels Pane Report'),
    );
  }

  /**
   * Implements setUp().
   */
  public function setUp() {
    parent::setUp(array('panels_pane_report', 'panels_node', 'page_manager'));
    db_truncate('panels_pane_report');
  }

  /**
   * Test report is accessible with permission.
   */
  public function testReportIsAccessible() {
    $admin_user = $this->drupalCreateUser(array(
      'access panels pane report',
    ));

    $this->drupalLogin($admin_user);
    $this->drupalGet('admin/reports/panels-pane-report');
    $this->assertText(t('Panels Pane Report'), 'Access allowed on panels pane report.');
  }

  /**
   * Test report is inaccessible without permission.
   */
  public function testReportIsInaccessible() {
    $admin_user = $this->drupalCreateUser(array());

    $this->drupalLogin($admin_user);
    $this->drupalGet('admin/reports/panels-pane-report');
    $this->assertText(t('Access denied'), 'Access denied on panels pane report.');
  }

  /**
   * Test report is accessible with permission.
   */
  public function testReportSettingsAreAccessible() {
    $admin_user = $this->drupalCreateUser(array(
      'administer panels pane report settings',
    ));

    $this->drupalLogin($admin_user);
    $this->drupalGet('admin/config/system/panels_pane_report');
    $this->assertText(t('Panels Pane Report'), 'Access allowed on panels pane report.');
  }

  /**
   * Test report is inaccessible without permission.
   */
  public function testReportSettingsAreInaccessible() {
    $admin_user = $this->drupalCreateUser(array());

    $this->drupalLogin($admin_user);
    $this->drupalGet('admin/config/system/panels_pane_report');
    $this->assertText(t('Access denied'), 'Access denied on panels pane report.');
  }

  /**
   * Test report can be regenerated with permission.
   */
  public function testReportCanBeRegenerated() {
    $admin_user = $this->drupalCreateUser(array(
      'access panels pane report',
      'generate panels pane report',
    ));

    $this->drupalLogin($admin_user);
    $this->drupalGet('admin/reports/panels-pane-report');
    $this->assertField('edit-regenerate-report');
  }

  /**
   * Test report can't be regenerated without permission.
   */
  public function testReportCantBeRegenerated() {
    $admin_user = $this->drupalCreateUser(array(
      'access panels pane report',
    ));

    $this->drupalLogin($admin_user);
    $this->drupalGet('admin/reports/panels-pane-report');
    $this->assertNoField('edit-regenerate-report');
  }

  /**
   * Test filter contains expected filter options.
   */
  public function testExpectedFilterOptions() {
    $row = array(
      'entity_type' => 'puppy',
      'pattern_storage_id' => 'k9',
      'page_storage_id' => 'yard1',
      'display_storage_type' => 'doghouse',
      'display_storage_id' => 'woofhouse9',
      'build_mode' => 'retriever',
      'style_mode' => 'golden',
      'bundle' => 'litter',
    );
    PanelsPaneReport::reportItem($row);

    $admin_user = $this->drupalCreateUser(array(
      'access panels pane report',
    ));

    $this->drupalLogin($admin_user);

    $this->drupalGet('admin/reports/panels-pane-report');

    // Entity Types.
    $this->assertRaw('<option value="puppy">puppy</option>');

    // Bundles.
    $this->assertRaw('<option value="litter">litter</option>');

    // Build Modes.
    $this->assertRaw('<option value="retriever">retriever</option>');

    // Style Modes.
    $this->assertRaw('<option value="golden">golden</option>');

    // Containers.
    $this->assertRaw('<option value="doghouse">doghouse</option>');
  }

  /**
   * Test report supports panels node containers.
   */
  public function testPanelsNodeContainers() {
    $admin_user = $this->drupalCreateUser(array(
      'access panels pane report',
      'generate panels pane report',
    ));

    // Create a temporary node.
    $node = $this->drupalCreateNode(array('type' => 'widget', 'uid' => $admin_user->uid));

    // Simulate the addition of the node to a panels_node panel.
    $did = 500;
    $storage_id = 8;
    $config_array = array('nid' => $node->nid, 'build_mode' => 'burrito');
    $style_array = array('style' => 'wrapped');

    db_insert('panels_pane')->fields(array(
      'did' => $did,
      'configuration' => serialize($config_array),
      'style' => serialize($style_array),
      'type' => 'node',
      'subtype' => 'node',
    ))->execute();

    db_insert('panels_display')->fields(array(
      'did' => $did,
      'panel_settings' => serialize(''),
      'storage_type' => 'panels_node',
      'storage_id' => $storage_id,
    ))->execute();

    db_insert('panels_node')->fields(array(
      'nid' => $node->nid,
      'did' => $did,
      'pipeline' => 'standard',
    ))->execute();

    // Attempt to login and regenerate the report.
    $this->drupalLogin($admin_user);
    $submit_options = array('query' => array('op' => 'Regenerate Report'));
    $this->drupalGet('admin/reports/panels-pane-report', $submit_options);
    $this->assertText('node:widget');
    $this->assertText('Build Mode: burrito');
    $this->assertText('Style: wrapped');
    $this->assertText($node->title);
    $this->assertRaw('<a href="' . url('node/' . $node->nid) . '" target="_blank">node/' . $node->nid . '</a>');
    $this->assertRaw('<a href="' . url('node/' . $storage_id) . '" target="_blank">node/' . $storage_id . '</a>');
    $this->assertText('panels_node [' . $storage_id . ']');
  }

}
