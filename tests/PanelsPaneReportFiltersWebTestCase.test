<?php

/**
 * @file
 * Panels Pane Report Filters Web Tests.
 */

/**
 * Web tests for the Panels Pane Report Filters.
 *
 * @ingroup Panels Pane Report
 */
class PanelsPaneReportFiltersWebTestCase extends PanelsPaneReportWebTestBaseCase {
  protected $profile = 'testing';

  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => t('Panels Panel Report Web Tests: Filters'),
      'description' => t('Test panels pane report filter functionality'),
      'group' => t('Panels Pane Report'),
    );
  }

  /**
   * Implements setUp().
   */
  public function setUp(array $modules = array()) {
    parent::setUp(array_merge($modules, array('panels_pane_report')));
  }

  /**
   * Test filter contains expected filter options.
   */
  public function testExpectedFilterOptions() {
    $row = array(
      'entity_type' => 'puppy',
      'pattern_storage_id' => 'k9',
      'page_storage_id' => 'yard1',
      'display_storage_type' => 'doghouse',
      'display_storage_id' => 'woofhouse9',
      'display_layout' => 'single',
      'build_mode' => 'retriever',
      'style_mode' => 'golden',
      'bundle' => 'litter',
      'panel' => 'bottom',
    );
    PanelsPaneReport::reportItem($row);

    $admin_user = $this->drupalCreateUser(array(
      'access panels pane report',
    ));

    $this->drupalLogin($admin_user);
    $this->drupalGet('admin/reports/panels-pane-report');

    // Entity Types.
    $this->assertRaw('<option value="puppy">puppy</option>');

    // Bundles.
    $this->assertRaw('<option value="litter">litter</option>');

    // Build Modes.
    $this->assertRaw('<option value="retriever">retriever</option>');

    // Style Modes.
    $this->assertRaw('<option value="golden">golden</option>');

    // Containers.
    $this->assertRaw('<option value="doghouse">doghouse</option>');

    // Container Layout.
    $this->assertRaw('<option value="single">single</option>');

    // Panel.
    $this->assertRaw('<option value="bottom">bottom</option>');

    // True/false/null filters.
    $this->assertRaw('<option value="1">✔ True</option>');
    $this->assertRaw('<option value="0">✖ False</option>');
    $this->assertRaw('<option value="-1">∅ Null</option>');
  }

}
