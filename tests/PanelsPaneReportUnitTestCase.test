<?php
/**
 * @file
 * Panels Pane Report Unit Tests.
 */

/**
 * Unit tests for the Panels Pane Report.
 *
 * @ingroup Panels Pane Report
 */
class PanelsPaneReportUnitTestCase extends DrupalUnitTestCase {

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'Panels Panel Report Unit Tests',
      'description' => 'Test panels pane report functionality',
      'group' => 'Panels Pane Report',
    );
  }

  /**
   * Include the necessary files for unit testing.
   */
  public function setUp() {
    module_load_include('inc', 'panels_pane_report', 'src/panels_pane_report.class');
    parent::setUp('panels_pane_report');
  }

  /**
   * Test PanelsPaneReport::retrievePageStorageIdsForInstance() output.
   */
  public function testPanelsNodeStorageIsUnaltered() {
    $instance_info = array('panel' => (object) array('storage_id' => 3167, 'storage_type' => 'panels_node'));
    $pane_mapping = array();
    $expected = array(3167 => 'panels_node');

    $this->assertEqual($expected, PanelsPaneReport::retrievePageStorageIdsForInstance($instance_info, $pane_mapping));
  }

  /**
   * Test PanelsPaneReport::retrievePageStorageIdsForInstance() output.
   */
  public function testPanelizerEntityStorageIsUnaltered() {
    $instance_info = array('panel' => (object) array('storage_id' => 'a:b:c', 'storage_type' => 'panelizer_entity'));
    $pane_mapping = array();
    $expected = array('a:b:c' => 'panelizer_entity');
    $this->assertEqual($expected, PanelsPaneReport::retrievePageStorageIdsForInstance($instance_info, $pane_mapping));
  }

  /**
   * Test PanelsPaneReport::retrievePageStorageIdsForInstance() output.
   */
  public function testPageManagerStorageIsUnaltered() {
    $instance_info = array('panel' => (object) array('storage_id' => 'page_custom_page__panel', 'storage_type' => 'page_manager'));
    $pane_mapping = array();
    $expected = array('page_custom_page__panel' => 'page_manager');
    $this->assertEqual($expected, PanelsPaneReport::retrievePageStorageIdsForInstance($instance_info, $pane_mapping));
  }

  /**
   * Test PanelsPaneReport::retrievePageStorageIdsForInstance() output.
   */
  public function testPaneMapInstancesExist() {
    $instance_info = array('panel' => (object) array('storage_id' => 'some_mini_panel', 'storage_type' => 'panels_mini'));
    $pane_mapping = array(
      'some_mini_panel' => array(
        'instances' => array(
          array('panel' => (object) array('storage_id' => 3167, 'storage_type' => 'panels_node')),
          array('panel' => (object) array('storage_id' => 5100, 'storage_type' => 'panels_node')),
          array('panel' => (object) array('storage_id' => 9033, 'storage_type' => 'panels_node')),
        ),
      ),
    );
    $expected = array(
      3167 => 'panels_node',
      5100 => 'panels_node',
      9033 => 'panels_node',
    );

    $this->assertEqual($expected, PanelsPaneReport::retrievePageStorageIdsForInstance($instance_info, $pane_mapping));
  }

  /**
   * Test PanelsPaneReport::retrievePageStorageIdsForInstance() output.
   */
  public function testOnlyRelevantPaneMapInstancesExist() {
    $instance_info = array('panel' => (object) array('storage_id' => 'another_mini_panel', 'storage_type' => 'panels_mini'));
    $pane_mapping = array(
      'some_mini_panel' => array(
        'instances' => array(
          array('panel' => (object) array('storage_id' => 3167, 'storage_type' => 'panels_node')),
          array('panel' => (object) array('storage_id' => 5100, 'storage_type' => 'panels_node')),
          array('panel' => (object) array('storage_id' => 9033, 'storage_type' => 'panels_node')),
        ),
      ),
      'another_mini_panel' => array(
        'instances' => array(
          array('panel' => (object) array('storage_id' => 9500, 'storage_type' => 'panels_node')),
          array('panel' => (object) array('storage_id' => 1233, 'storage_type' => 'panels_node')),
        ),
      ),
    );
    $expected = array(
      9500 => 'panels_node',
      1233 => 'panels_node',
    );

    $this->assertEqual($expected, PanelsPaneReport::retrievePageStorageIdsForInstance($instance_info, $pane_mapping));
  }

  /**
   * Test PanelsPaneReport::retrievePageStorageIdsForInstance() output.
   */
  public function testUnreferencedMiniPanelReportsCorrectly() {
    $instance_info = array('panel' => (object) array('storage_id' => 'some_mini_panel', 'storage_type' => 'panels_mini'));
    $pane_mapping = array('some_mini_panel' => array());
    $expected = array(
      PanelsPaneReport::NODE_UNREFERENCED => PanelsPaneReport::NODE_UNREFERENCED,
    );

    $this->assertEqual($expected, PanelsPaneReport::retrievePageStorageIdsForInstance($instance_info, $pane_mapping));
  }

}
